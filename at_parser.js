outlets = 5; // default value// incommingCallCMD =  "*ECAV"; // Sony EricssonincommingCallCMD =  "+CLIP";numberReport = "+CNUM";volumeLevelReport = "+CLVL";signalQuality = "+CSQ";post();post("AT COMMAND PARSER for limited purpose....");function loadbang() {	// Welcome Message	outlet(4,"status","IDLE");	outlet(4,"type","");	outlet(4,"number","");}function modemresponse() {	var a = arrayfromargs(arguments);	if(a.length == 0) return;	a = a[0].split(": ");	switch (a[0]) {		case "RING":			ring();		break;		case "OK":			ok();		break;		case numberReport:			var cnum = a[1].split(",")[1].replace(/"/g,"");			outlet(4,"ownnumber",cnum);		break;		case incommingCallCMD:			handleCallMonitor(a)		break;		case volumeLevelReport:			outlet(4,"volume",a[1]);		break;		case signalQuality:			outlet(4,"signal",parseSignal(a[1].split(",")[0]));		break;	}}function ok(){	outlet(0,"bang");}function ring() {	outlet(1,"bang");}function hungup() {	outlet(2,"bang");}function reportCallState(state) {	outlet(3,state);}var CALLTYPES = {	1:"VOICE",	2:"DATA",	4:"FAX",	128:"VOICE2",}var CALLSTATUS = {	0: "IDLE",	1: "CALLING",	2: "CONNECTING",	3: "ACTIVE",	4: "HOLD",	5: "WAITING",	6: "ALERTING",	7: "BUSY"}var callactive = false;function handleCallMonitor(_args) {	var command = _args[0];	var args = _args[1].split(",");	var id = args.length>0?args[0]:-1;	var callstatus = args.length>1 ? CALLSTATUS[args[1]] : "";	var calltype = args.length>1 ? CALLTYPES[args[2]] : "";	var number = args.length>5 ? args[5] : "";	if (!parseInt(number)) {		number = number.replace(/"/g,"");		outlet(4,"number",number);	}		outlet(4,"status",callstatus);	outlet(4,"type",calltype);		if(callstatus == CALLSTATUS[1] || callstatus == CALLSTATUS[6]) ring();	else if (callstatus == CALLSTATUS[7] || callstatus == CALLSTATUS[0]) {		hungup();		callactive = false;		reportCallState(callactive);	}	else if (callstatus == CALLSTATUS[3]) {		callactive = true;		reportCallState(callactive);	}	}function parseSignal(input){	var signal,rssi = parseInt(input);	if(rssi == NaN) return -3; // parse error!	if (rssi==99) {		signal = -1;	} else if (rssi == 0) {		signal = 0;	} else if (rssi == 1) {		signal = 1;	} else if (rssi >= 2 && rssi <= 30) {		signal = 2;	} else if (rssi >= 31) {		signal = 3;	} else {		signal = -2;	}	return signal;}